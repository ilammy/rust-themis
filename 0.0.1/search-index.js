var N = null;var searchIndex = {};
searchIndex["themis"]={"doc":"Themis Library","items":[[3,"Error","themis","The error type for most Themis operations.",N,N],[4,"ErrorKind","","A list of Themis error categories.",N,N],[13,"Fail","","General failure.",0,N],[13,"InvalidParameter","","Some input parameter has incorrect value.",0,N],[13,"NoMemory","","Could not allocate memory.",0,N],[13,"BufferTooSmall","","The provided buffer is too small to fit the result.",0,N],[13,"DataCorrupt","","Input data is corrupted.",0,N],[13,"InvalidSignature","","Input data contains invalid signature.",0,N],[13,"NotSupported","","Operation not supported.",0,N],[13,"SessionKeyAgreementNotFinished","","Attempt to use Secure Session before completing key exchange.",0,N],[13,"SessionTransportError","","Transport layer returned error.",0,N],[13,"SessionGetPublicKeyForIdError","","Could not retrieve a public key corresponding to peer ID.",0,N],[13,"CompareNotReady","","Attempt to use Secure Comparator before completing nonce exchange.",0,N],[0,"keygen","","Generating key material.",N,N],[5,"gen_rsa_key_pair","themis::keygen","Generates a private-public pair of RSA keys.",N,[[],["result",["error"]]]],[5,"gen_ec_key_pair","","Generates a private-public pair of ECDSA keys.",N,[[],["result",["error"]]]],[0,"secure_cell","themis","Secure Cell service.",N,N],[3,"SecureCellContextImprint","themis::secure_cell","Secure Cell in a context imprint operation mode.",N,N],[3,"SecureCellSeal","","Secure Cell in a sealing operation mode.",N,N],[3,"SecureCellTokenProtect","","Secure Cell in a token protect operation mode.",N,N],[3,"SecureCell","","Basic Secure Cell.",N,N],[11,"encrypt","","Encrypts the provided message and returns the ciphertext.",1,[[["self"],["m"]],["result",["vec","error"]]]],[11,"decrypt","","Decrypts the ciphertext and returns the original message.",1,[[["self"],["m"]],["result",["vec","error"]]]],[11,"encrypt","","Encrypts and puts the provided message into a sealed cell.",2,[[["self"],["m"]],["result",["vec","error"]]]],[11,"decrypt","","Extracts the original message from a sealed cell.",2,[[["self"],["m"]],["result",["vec","error"]]]],[11,"encrypt","","Encrypts the provided message and returns the ciphertext with authentication token.",3,[[["self"],["m"]],["result",["error"]]]],[11,"decrypt","","Decrypts the ciphertext then validates and returns the original message.",3,[[["self"],["m"],["t"]],["result",["vec","error"]]]],[11,"with_key","","Constructs a new cell secured by a master key.",4,[[["k"]],["self"]]],[11,"with_key_and_context","","Constructs a new cell secured by a master key and arbitrary user data.",4,[[["k"],["c"]],["self"]]],[11,"seal","","Switches this Secure Cell to the sealing operation mode.",4,[[["self"]],["securecellseal"]]],[11,"token_protect","","Switches this Secure Cell to the token protect operation mode.",4,[[["self"]],["securecelltokenprotect"]]],[11,"context_imprint","","Switches this Secure Cell to the context imprint operation mode.",4,[[["self"]],["securecellcontextimprint"]]],[0,"secure_comparator","themis","Secure Comparator service.",N,N],[3,"SecureComparator","themis::secure_comparator","Secure Comparison context.",N,N],[11,"new","","Prepares for a new comparison.",5,[[],["option"]]],[11,"append_secret","","Collects the data to be compared.",5,[[["self"],["s"]],["result",["error"]]]],[11,"begin_compare","","Starts comparison on the client returning the first message.",5,[[["self"]],["result",["vec","error"]]]],[11,"proceed_compare","","Continues comparison process with given message.",5,[[["self"],["d"]],["result",["vec","error"]]]],[11,"get_result","","Returns the result of comparison.",5,[[["self"]],["result",["bool","error"]]]],[0,"secure_message","themis","Secure Message service.",N,N],[3,"SecureMessage","themis::secure_message","Secure Message encryption.",N,N],[3,"SecureSign","","Secure Message signing.",N,N],[3,"SecureVerify","","Secure Message verification.",N,N],[11,"clone","","",6,[[["self"]],["securemessage"]]],[11,"new","","Makes a new Secure Message using given keys.",6,[[["d"],["e"]],["self"]]],[11,"wrap","","Wraps the provided message into a secure encrypted message.",6,[[["self"],["m"]],["result",["vec","error"]]]],[11,"unwrap","","Unwraps an encrypted message back into its original form.",6,[[["self"],["m"]],["result",["vec","error"]]]],[11,"clone","","",7,[[["self"]],["securesign"]]],[11,"new","","Makes a new Secure Message using given private key.",7,[[["d"]],["self"]]],[11,"sign","","Securely signs a message and returns it with signature attached.",7,[[["self"],["m"]],["result",["vec","error"]]]],[11,"clone","","",8,[[["self"]],["secureverify"]]],[11,"new","","Makes a new Secure Message using given public key.",8,[[["e"]],["self"]]],[11,"verify","","Verifies a signature and returns the original message.",8,[[["self"],["m"]],["result",["vec","error"]]]],[0,"secure_session","themis","Secure Session service.",N,N],[3,"SecureSession","themis::secure_session","Secure Session context.",N,N],[4,"SecureSessionState","","State of Secure Session connection.",N,N],[13,"Idle","","Newly created sessions start in this state.",9,N],[13,"Negotiation","","Connection establishment in progress.",9,N],[13,"Established","","Connection has been established, data exchange may commence.",9,N],[8,"SecureSessionTransport","","Transport delegate for Secure Session.",N,N],[11,"send_data","","Send the provided data to the peer, return the number of bytes transferred.",10,N],[11,"receive_data","","Receive some data from the peer into the provided buffer, return the number of bytes.",10,N],[11,"state_changed","","Notification about connection state of Secure Session.",10,[[["self"],["securesessionstate"]]]],[10,"get_public_key_for_id","","Get a public key corresponding to a peer ID.",10,N],[11,"eq","","",9,[[["self"],["securesessionstate"]],["bool"]]],[11,"with_transport","","Creates a new Secure Session.",11,[[["i"],["k"],["t"]],["option"]]],[11,"is_established","","Returns `true` if this Secure Session may be used for data transfer.",11,[[["self"]],["bool"]]],[11,"get_remote_id","","Returns ID of the remote peer.",11,[[["self"]],["result",["vec","error"]]]],[11,"connect","","Initiates connection to the remote peer.",11,[[["self"]],["result",["error"]]]],[11,"generate_connect_request","","Initiates connection to the remote peer, returns connection message.",11,[[["self"]],["result",["vec","error"]]]],[11,"wrap","","Wraps a message and returns it.",11,[[["self"],["m"]],["result",["vec","error"]]]],[11,"unwrap","","Unwraps a message and returns it.",11,[[["self"],["m"]],["result",["vec","error"]]]],[11,"negotiate","","Continues connection negotiation with given message.",11,[[["self"],["m"]],["result",["vec","error"]]]],[11,"send","","Sends a message to the remote peer.",11,[[["self"],["m"]],["result",["error"]]]],[11,"receive","","Receives a message from the remote peer.",11,[[["self"],["usize"]],["result",["vec","error"]]]],[11,"negotiate_transport","","Continues connection negotiation.",11,[[["self"]],["result",["error"]]]],[11,"fmt","themis","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["error"]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",12,[[["self"]],["errorkind"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",0,[[["self"],["errorkind"]],["bool"]]],[11,"clone","","",0,[[["self"]],["errorkind"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","themis::secure_cell","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","themis::secure_comparator","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","themis::secure_message","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","themis::secure_session","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]]],"paths":[[4,"ErrorKind"],[3,"SecureCellContextImprint"],[3,"SecureCellSeal"],[3,"SecureCellTokenProtect"],[3,"SecureCell"],[3,"SecureComparator"],[3,"SecureMessage"],[3,"SecureSign"],[3,"SecureVerify"],[4,"SecureSessionState"],[8,"SecureSessionTransport"],[3,"SecureSession"],[3,"Error"]]};
initSearch(searchIndex);
